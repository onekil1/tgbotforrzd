import telebot
import threading
import time
import json

from datetime import datetime, timedelta
from config import token_bot, channel, token_ii
from openai import OpenAI

TOKEN = token_bot
CHANNEL_ID = channel
bot = telebot.TeleBot(TOKEN)
messages = []

client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=token_ii
)

def run_telebot_with_reconnect(): # —Ä–µ–∫–æ–Ω–µ–∫—Ç –∏ –æ—à–∏–±–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ—à–∏–±–∫–∞–º–∏
    while True:
        try:
            bot.send_message(CHANNEL_ID, "üöÄ*–ê–≤—Ç–æ–¥–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!* üöÄ", parse_mode='Markdown')
            bot.polling(none_stop=True, skip_pending=True)
        except Exception as e:
            print("–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤, ", e)
            try:
                bot.send_message(CHANNEL_ID, "‚ö†Ô∏è–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ API "
                                             "—Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (–ª–∏–º–∏—Ç 50 —Ç–æ–∫–µ–Ω–æ–≤ –≤ –¥–µ–Ω—å")
            except Exception as send_err:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:", send_err)
            time.sleep(10)

def contains_notnews_tag(text): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–≥ Notnews
    if not text:
        return False
    return 'Notnews' in text.lower()

def clean_openai_response(text):     #—É–¥–∞–ª–µ–Ω–∏–µ ``````
    if text.startswith("```") and text.endswith("```"):
        text = text[3:-3].strip()
        if text.lower().startswith("json"):
            text = text[4:].strip()
    return text

def clean_old_messages():       #–æ—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
    global messages
    one_week_ago = datetime.now() - timedelta(seconds=60)
    messages = [m for m in messages if m['date'] > one_week_ago]

def classify_news(text):    #–ø—Ä–æ–º—Ç–∏–∫ –¥–ª—è –Ω–µ–π—Ä–æ–Ω–∫–∏
    prompt = (
        f"–û–±—ä–µ–∫—Ç–∏–≤–Ω–æ (–æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã) –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:\n\"{text}\"\n"
        "–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON —Å —á–µ—Ç—ã—Ä—å–º—è –ø–æ–ª—è–º–∏:\n"
        "{\n"
        "  \"summary\": \–û —á–µ–º —ç—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å, –Ω–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –Ω–µ –±–æ–ª–µ–µ 20 —Å–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ \n"
        "  \"level\": \"–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å\",\n"
        "  \"direction\": \–û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –æ—Ñ–æ—Ä–º–∏ —Ç–µ–≥ –¥–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–î–∞—Ç–∞—Å–∞–∏–Ω—Å, "
        "–ü—Ä–æ–º–ø—Ç–∏–Ω–≥, Notnews, –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞, –ö–æ–¥–∏–Ω–≥) ,\n"
        "  \"relevance\": \–û–±—ä–µ–∫—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç—å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, "
        "—Å—Ç—Ä–æ–≥–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 (—Ü–µ–ª–æ–µ), –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç–∞–∫ –∫–∞–∫ –æ—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤\n"
        "}\n"
        "–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
    )
    try:
        response = client.chat.completions.create(
            #model='deepseek/deepseek-chat-v3.1:free',
            model='openai/gpt-oss-120b:free',
            messages=[{"role": "user", "content": prompt}],
            temperature=0.1,
            max_tokens=400
        )
        answer = response.choices[0].message.content.strip()
        clean_answer = clean_openai_response(answer)
        data = json.loads(clean_answer) #—Ä–∞—Å–ø–∞—Ä—Å–∏–Ω–≥ JSON-–æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
        return {
            "summary": data.get('summary', 'N/A'),
            "level": data.get("level", "N/A"),
            "direction": data.get("direction", "N/A"),
            "relevance": str(data.get("relevance", "N/A"))
        }
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–∏:", e)
        print("–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:", answer)
        return {"level": "N/A", "direction": "N/A", "relevance": "N/A"}


def create_digest(messages): #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    digest_lines = []
    channel_id_str = str(CHANNEL_ID)
    if channel_id_str.startswith("-100"):
        channel_id_short = channel_id_str[4:]
    else:
        channel_id_short = channel_id_str.lstrip('-')

    for msg in messages:
        text = msg['text']
        analysis = classify_news(text)
        message_link = f"https://t.me/c/{channel_id_short}/1/{msg['message_id']}"
        digest_lines.append(
            f"üì∞ –°—Ç–∞—Ç—å—è: {analysis['summary']}\n"
            f"üè∑Ô∏è –¢–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: #{analysis['direction']}\n"
            f"üßë‚Äçüíª –£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è: {analysis['level']}\n"
            f"‚úîÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å: {analysis['relevance']}\n"
            f"‚û°Ô∏è [–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]({message_link})\n"
        )
    return '\n'.join(digest_lines)


def fetch_and_send_summary(): #–º–µ–π–Ω —Ñ—É–Ω–∫—Ü–∏—è –ø–æ –ø–æ—Å—Ç–∏–Ω–≥—É –¥–∞–π–¥–∂–µ—Å—Ç–∞
    while True:
        time.sleep(60)
        clean_old_messages()
        if not messages:
            all_news = "–ó–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        else:
            all_news = "üì∞*–î–∞–π–¥–∂–µ—Å—Ç –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é:*\n\n" + create_digest(messages)
        bot.send_message(CHANNEL_ID, all_news, parse_mode='Markdown')

@bot.message_handler(func=lambda m: True, content_types=['text', 'photo', 'video', 'document'])
def handle_message(message):
    if int(message.chat.id) == int(CHANNEL_ID):
        text = message.text or message.caption or ''

        if message.forward_from or message.forward_from_chat:
            print("–≠—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")

        if text:
            analysis = classify_news(text)
            combined_fields = " ".join([str(analysis.get(k, "")).lower() for k in ["summary",
                                                                                   "direction", "level", "relevance"]])
            print("Debug combined_fields:", combined_fields)  # –û—Ç–ª–∞–¥–∫–∞

            if contains_notnews_tag(combined_fields):
                print("–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–≥–æ–º #Notnews –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞")
                return

            print(f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}')
            messages.append({
                'text': text,
                'date': datetime.fromtimestamp(message.date),
                'message_id': message.message_id,
            })

if __name__ == "__main__":
    bot_thread = threading.Thread(target=run_telebot_with_reconnect, daemon=True)
    bot_thread.start()

    summary_thread = threading.Thread(target=fetch_and_send_summary, daemon=True)
    summary_thread.start()

    summary_thread.join()